// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/package-service.proto

package package_service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Package with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Package) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	return nil
}

// PackageValidationError is the validation error returned by Package.Validate
// if the designated constraints aren't met.
type PackageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PackageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PackageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PackageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PackageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PackageValidationError) ErrorName() string { return "PackageValidationError" }

// Error satisfies the builtin error interface
func (e PackageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPackage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PackageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PackageValidationError{}

// Validate checks the field values on GetPackageByNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPackageByNameRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	return nil
}

// GetPackageByNameRequestValidationError is the validation error returned by
// GetPackageByNameRequest.Validate if the designated constraints aren't met.
type GetPackageByNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPackageByNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPackageByNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPackageByNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPackageByNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPackageByNameRequestValidationError) ErrorName() string {
	return "GetPackageByNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPackageByNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPackageByNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPackageByNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPackageByNameRequestValidationError{}

// Validate checks the field values on GetPackageByNameResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPackageByNameResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPackage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPackageByNameResponseValidationError{
				field:  "Package",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetPackageByNameResponseValidationError is the validation error returned by
// GetPackageByNameResponse.Validate if the designated constraints aren't met.
type GetPackageByNameResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPackageByNameResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPackageByNameResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPackageByNameResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPackageByNameResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPackageByNameResponseValidationError) ErrorName() string {
	return "GetPackageByNameResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPackageByNameResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPackageByNameResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPackageByNameResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPackageByNameResponseValidationError{}

// Validate checks the field values on GetPackagesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPackagesRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetPackagesRequestValidationError is the validation error returned by
// GetPackagesRequest.Validate if the designated constraints aren't met.
type GetPackagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPackagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPackagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPackagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPackagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPackagesRequestValidationError) ErrorName() string {
	return "GetPackagesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPackagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPackagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPackagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPackagesRequestValidationError{}

// Validate checks the field values on GetPackagesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPackagesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetPackage() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPackagesResponseValidationError{
					field:  fmt.Sprintf("Package[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetPackagesResponseValidationError is the validation error returned by
// GetPackagesResponse.Validate if the designated constraints aren't met.
type GetPackagesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPackagesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPackagesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPackagesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPackagesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPackagesResponseValidationError) ErrorName() string {
	return "GetPackagesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPackagesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPackagesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPackagesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPackagesResponseValidationError{}

// Validate checks the field values on CreatePackageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreatePackageRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	return nil
}

// CreatePackageRequestValidationError is the validation error returned by
// CreatePackageRequest.Validate if the designated constraints aren't met.
type CreatePackageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePackageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePackageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePackageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePackageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePackageRequestValidationError) ErrorName() string {
	return "CreatePackageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePackageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePackageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePackageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePackageRequestValidationError{}

// Validate checks the field values on CreatePackageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreatePackageResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPackage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePackageResponseValidationError{
				field:  "Package",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreatePackageResponseValidationError is the validation error returned by
// CreatePackageResponse.Validate if the designated constraints aren't met.
type CreatePackageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePackageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePackageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePackageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePackageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePackageResponseValidationError) ErrorName() string {
	return "CreatePackageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePackageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePackageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePackageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePackageResponseValidationError{}

// Validate checks the field values on UpdatePackageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdatePackageRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPackage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePackageRequestValidationError{
				field:  "Package",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdatePackageRequestValidationError is the validation error returned by
// UpdatePackageRequest.Validate if the designated constraints aren't met.
type UpdatePackageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePackageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePackageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePackageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePackageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePackageRequestValidationError) ErrorName() string {
	return "UpdatePackageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePackageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePackageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePackageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePackageRequestValidationError{}

// Validate checks the field values on UpdatePackageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdatePackageResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPackage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePackageResponseValidationError{
				field:  "Package",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdatePackageResponseValidationError is the validation error returned by
// UpdatePackageResponse.Validate if the designated constraints aren't met.
type UpdatePackageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePackageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePackageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePackageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePackageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePackageResponseValidationError) ErrorName() string {
	return "UpdatePackageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePackageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePackageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePackageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePackageResponseValidationError{}

// Validate checks the field values on DeletePackageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeletePackageRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeletePackageRequestValidationError is the validation error returned by
// DeletePackageRequest.Validate if the designated constraints aren't met.
type DeletePackageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePackageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePackageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePackageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePackageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePackageRequestValidationError) ErrorName() string {
	return "DeletePackageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePackageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePackageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePackageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePackageRequestValidationError{}

// Validate checks the field values on DeletePackageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeletePackageResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Completed

	return nil
}

// DeletePackageResponseValidationError is the validation error returned by
// DeletePackageResponse.Validate if the designated constraints aren't met.
type DeletePackageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePackageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePackageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePackageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePackageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePackageResponseValidationError) ErrorName() string {
	return "DeletePackageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePackageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePackageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePackageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePackageResponseValidationError{}
